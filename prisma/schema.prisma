// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    PATIENT
    DOCTOR
    ACCOUNTANT
    RECEPTIONIST
    ADMIN
}

enum Sex {
    MALE
    FEMALE
    NON_BINARY
    OTHER
}

model User {
    id            String    @id @default(cuid())
    firstName      String?
    lastName      String?
    pesel         String    @unique
    email         String    @unique
    emailVerified DateTime?
    phoneNumber   String?
    sex           Sex
    address       String?
    image         String?
    passwordHash  String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    role          UserRole  @default(PATIENT)
    patient       Patient?
    doctor        Doctor?
    accounts      Account[]
    sessions      Session[]
}

model Patient {
    user           User             @relation(fields: [userId], references: [id])
    userId         String           @id @unique
    opinions       Opinion[]
    allergies      Allergy[]
    MedicalHistory MedicalHistory[]
    visits         Visit[]
}

model Allergy {
    id      Int       @id @default(autoincrement())
    name    String
    patient Patient[]
}

enum DiseaseRegion {
    HEAD
    CHEST
    LEFT_LEG
    LEFT_ARM
    RIGHT_LEG
    RIGHT_ARM
    THROAT
}

model MedicalHistory {
    id        Int     @id @default(autoincrement())
    patient   Patient @relation(fields: [patientId], references: [userId])
    patientId String
    Doctor    Doctor  @relation(fields: [doctorId], references: [userId])
    doctorId  String

    diseaseName   String
    region        DiseaseRegion
    diagnosisDate DateTime  @default(now())
    recoveryDate  DateTime?
}

model Opinion {
    id        Int     @id @default(autoincrement())
    patient   Patient @relation(fields: [patientId], references: [userId])
    patientId String
    doctor    Doctor  @relation(fields: [doctorId], references: [userId])
    doctorId  String

    opinionText String?
    rating      Int

    @@unique([patientId, doctorId])
}

enum VisitStatus {
    SCHEDULED
    CANCELED
    ONGOING
    FINISHED
}

model DoctorCalendarDay {
    doctorId  String
    date      DateTime
    startHour Int
    endHour   Int

    @@id([doctorId, date])
}

model Visit {
    id        Int      @id @default(autoincrement())
    Patient   Patient? @relation(fields: [patientId], references: [userId])
    patientId String
    Doctor    Doctor?  @relation(fields: [doctorId], references: [userId])

    title        String
    date         DateTime
    status       VisitStatus
    doctorId     String
    prescription String?
    drugs        Drug[]
}

model Drug {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    visits      Visit[]
}

model Doctor {
    user           User             @relation(fields: [userId], references: [id])
    userId         String           @id @unique
    opinion        Opinion[]
    specialization Specialization[]
    MedicalHistory MedicalHistory[]
    visits         Visit[]
}

model Specialization {
    id     String   @id @default(cuid())
    name   String
    doctor Doctor[]
}
